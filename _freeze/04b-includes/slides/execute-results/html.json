{
  "hash": "d922f471dfc484af1ee12afb6388c5b1",
  "result": {
    "markdown": "---\ntitle: \"Quarto Includes\"\nsubtitle: \"Session 4: More Quarto for Academics\"\nauthor: \"Cynthia Huang\"\ndate: 2023-07-18\nformat: revealjs\nmetadata-files: \n  - ../_slides.yml\n---\n\n\n\n\n# Advanced Quarto\n\n## Quarto Extensions\n\nExtensions are a powerful way to modify and extend the behavior of Quarto. Types of extensions include:\n\n::: incremental\n- Custom Formats\n- Journal Articles\n- Revealjs (presentation) Plug-Ins\n- *Shortcode/Filters*\n:::\n\n## Quarto Extensions\n\n::: {.callout-warning}\n# Extension Trust\n\nQuarto extensions may execute code when documents are rendered. Therefore, if you do not trust the author of an extension, do not install or use the extension.\n:::\n\n. . .\n\nGenerally safe:\n\n- extensions maintained by the core Quarto team, or\n- developed by someone you know\n\n## Quarto Includes\n\nThere are a number of ways to include and reuse existing content in Quarto documents. We've already covered:\n\n::: incremental\n- `include-in*` YAML options for including LaTex/HTML in `header`, `before` and `after` the body.\n- `metadata-files` YAML option for reusing config files\n:::\n\n. . .\n\nThere's also:\n\n::: incremental\n- the shortcode `{{< include _content.qmd >}}`\n- the Lua filter extension `include-code-files`\n:::\n\n<!-- . . .\n\n::: callout-tip\nNote that these are all advanced Quarto functions, but are worthwhile learning if you are working with multiple softwares or formats.\n::: -->\n\n# Reusing content\n\n## Shortcodes: Includes\n\nSee: [quarto.org \\> Guide \\> Advanced \\> Includes](https://quarto.org/docs/authoring/includes.html)\n\n::: incremental\n- Shortcodes are special markdown directives that generate various types of content.\n- The `{{< include >}}` shortcode allows you to re-use content across documents.\n- `{{< include _snippet.qmd >}}` is equivalent to copying and pasting the text from the `_snippet.qmd` file into the main quarto file.\n:::\n\n## Include more Quarto\n\nAdd the shortcode where you want your file to appear:\n\n```{.md code-line-numbers=\"9\"}\n---\ntitle: \"My Document\"\n---\n\n## Overview\n\nI have some quarto content I want to reuse right here:\n\n{{< include _basics.qmd >}}\n\n## Another Section\n\nMore content here...\n\n```\n. . .\n\nFiles prefixed with underscores (e.g. `_basic.qmd`) are ignored when rendering a whole directory of `.qmd` files.\n\n## Include Text Formats\n\nRecall that Includes are equivalent to copy and pasting text. Therefore we can also use it to include content from other text based formats (e.g. `.txt`, `.tex`, `.html`, `.md`):\n\n```{.md code-line-numbers=\"9,13\"}\n---\ntitle: \"My Analysis\"\n---\n\n## Results\n\nI have some markdown content that was generated by STATA:\n\n{{< include _stata-output.md >}}\n\n## Acknowledgements\n\n{{< include acknowledgements.txt >}}\n```\n\n# What about STATA scripts?\n\n## Syntax Highlighting\n\nPandoc (and thus Quarto) offers syntax hightlighting in code blocks for over 140 languages, including STATA:\n\n```{.stata filename=\"script.do\"}\nuse \"C:\\data\\data-sets\\GSS2016.dta\"\ntab postlife\ntab postlife sex,column \n```\n. . .\n\nor R:\n\n```{.r}\nprint(\"Hello World\")\n```\n. . .\n\nor command line (zsh):\n```{.zsh}\nquarto render document.qmd --to pdf\n```\n\n## Syntax Highlighting: STATA\n\n::: incremental\n- Copy your STATA code into a code block\n- Add `.stata` to the top fence:\n:::\n\n. . .\n````{.md code-line-numbers=\"1\"}\n```{.stata filename=\"script.do\"}\nuse \"C:\\data\\data-sets\\GSS2016.dta\"\ntab postlife\ntab postlife sex,column \n```\n````\n. . .\n\n- `filename` specifies a name to display above the code lines as shown on the previous slide. This is useful to showing parts of a longer script.\n\n## Aside: Executable Code Chunks\n\nExecutable R/python code chunks also have syntax highlighting, but don't have a leading dot:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\nprint(\"Hello World\")\n```\n````\n:::\n\n\n. . .\n\nVS display only code-blocks\n````md\n```{.r}\nprint(\"Hello World\")\n```\n````\n\n# include-code-files\n\n## Syntax Highlighting for Included Files\n\n::: incremental\n- Copy and pasting code is both tedious and error prone.\n- Unfortunately you cannot put Includes shortcodes inside code blocks:\n:::\n. . .\n\n````{.md}\nThis will not work!\n\n```{.stata}\n{{< include myjob.do >}}\n```\n````\n. . .\n\n- BUT we can include external code and use syntax highlighting with the `include-code-files` extension\n\n## Lua Filter Extension\n\nThe [`include-code-files`](https://github.com/quarto-ext/include-code-files) is an Lua Filter extension developed and maintained by the core Quarto team [(github.com/quarto-ext)](https://github.com/quarto-ext) allows you:\n\n- to read in source files and,\n- display them in code blocks with syntax highlighting.\n\n## Installing Extensions\n\nTo install:\n```terminal\nquarto add quarto-ext/include-code-files\n```\n\nTo use the extension add this option to either document or project metadata:\n```yaml\n---\nfilters:\n   - include-code-files\n---\n```\n. . .\n\n::: {.callout-tip}\nThe `include-code-files` extension is already included in the exercises folder.\n:::\n\n## Using Extensions\n\nTo use the `include-code-files` extension, include the following where you want to display `script.do`\n\n````md\n```{.stata include=\"script.do\"}\n```\n````\n\nWhich will show the contents of `script.do` with syntax highlighting:\n\n```{.stata code-line-numbers=\"true\"}\n...\ntabulate region                   /* obtain summary statistics */\nsummarize marriage_rate divorce_rate median_age if state!=\"Nevada\"\n...\n```\n\n## Code Block Options\n\nYou can specify additional options separated by spaces. For example:\n````\n```{.stata include=\"script.do\" code-line-numbers=\"false\" filename=\"script.do\"}\n```\n````\n\n::: {.callout-note}\nCurrently, not all HTML Code Block options work with the `include-code-files` extension (e.g. `code-fold`). You may still need to copy and paste code.\n:::\n\n## Our Turn: replication_in_parts.qmd\n\n::: follow\n- Open the `day01-exercises` project in Rstudio.\n- Open `replication_in_parts.qmd`.\n- Render the document.\n:::\n\n\n## Your Turn: replication_in_parts.qmd\n\n::: task\nContinue with exercises in `replication_in_parts.qmd`\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_3451fa7f\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}