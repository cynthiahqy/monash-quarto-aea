{
  "hash": "6d6bc865215e4d60647fc2dd501b8d4c",
  "result": {
    "markdown": "---\ntitle: \"Listings\"\nsubtitle: \"Session 4: More Quarto for Academics\"\nauthor: \"Cynthia Huang\"\ndate: 2023-07-20\nformat: revealjs\nmetadata-files: \n  - ../_slides.yml\n---\n\n\n\n\n# Make me a List!\n\n## Quarto Listings...\n\n::: incremental\n- generate summary 'lists' which display YAML metadata\n- can collect metadata from multiple `.qmd` files or a YAML listings\n- offer sorting, filtering and categorisation of list items\n- have three built-in display types with customisation options\n- can be placed in different locations on a page and alongside other listings\n:::\n\n## Use Cases\n\n- event listings\n- blog posts\n- glossary\n- team profiles\n- ...\n\n## Basic Listings YAML\n\nA listing can be included on any page by adding the `listing` key into the YAML header:\n\n```{.yaml code-line-numbers=\"1-5|4-5\"}\n---\ntitle: \"A page with a Listing\"\nlisting:\n  contents: # ADD items #\n  type:     # PICK default / grid / table #\n---\n```\n\n::: incremental\n- `contents` controls what items appear in the listing\n- `type` controls how the listing is displayed\n:::\n## More YAML, more Features!\n\nIn addition to `contents` and `type`, other listings options include:\n\n::: incremental\n- `sort`, `filter`\n- `categories`\n- `include`/`exclude`\n- `sort-ui`, `filter-ui`\n- `id`\n:::\n. . .\n\nSee [Website Reference \\> Listings](https://quarto.org/docs/reference/projects/websites.html#listings) for all options.\n\n## Listing Contents\n\nItems for listings can be created using metadata from:\n\n::: incremental\n- other `.qmd` files in the same folder as the listing page\n- a YAML file\n- files across multiple folders\n:::\n\n## Listing Types {.medium}\n\nQuarto offers 3 built-in display `type`s for listings:\n\n::: incremental\n- `default`: blog style with featured image\n- `grid`: card style with featured image\n- `table`: table style\n:::\n. . .\n\nSee also:\n\n::: incremental\n- [Listing Options Guide](https://quarto.org/docs/websites/website-listings.html#listing-options) for options which modify each display type.\n- [Custom Listings Guide](https://quarto.org/docs/websites/website-listings-custom.html) for even more customisation via EJS templates.\n:::\n\n## Listing Fields {.medium}\n\nTo populate listings, Quarto uses metadata or content from targeted documents. Each listing types displays some fields by default:\n\n+---------------+---------------+--------------+--------------+\n| Field         | Default       | Table        | Grid         |\n+===============+:=============:+:============:+:============:+\n| `title`       | x             | x            | x            |\n+---------------+---------------+--------------+--------------+\n| `subtitle`    | x             |              |              |\n+---------------+---------------+--------------+--------------+\n| `author`      | x             | x            | x            |\n+---------------+---------------+--------------+--------------+\n| `description` | x             |              | x            |\n+---------------+---------------+--------------+--------------+\n| `date`        | x             | x            | x            |\n+---------------+---------------+--------------+--------------+\n| `image`       | x             |              | x            |\n+---------------+---------------+--------------+--------------+\n\n## Listing Fields\n\nTo display fields which are not shown by default, specify additional fields in the `fields` option:\n\n```{.yaml code-line-numbers=\"4\"}\nlisting:\n  type: table\n  contents: posts\n  fields: [image, date, title, author, reading-time]\n```\n\n# Listing Pages\n\n## Our Turn: Listings Inside a Folder {.medium}\n\n<!--- next time: starter site with more docs for listings --->\n\n::: task\n- Reopen the `fresh-web` website project.\n\n- Add a listing page for contents in the folder `posts/`:\n\n```{.yaml filename=\"posts/index.qmd\"}\n---\ntitle: \"Page with Listing\"\nlisting: default\n---\n```\n\n- Which files show up in the listing?\n:::\n\n::: callout-important\nDon't forget to add `posts/index.qmd` to your website navigation!\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_a4d55d50\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Listings from YAML\n\nWe can also list items from a YAML file:\n\n```{.yaml filename=\"people.yml\"}\n- title: \"John Smith\"\n  email: \"john.smith@example.com\"\n  image: images/john.jpg\n- title: \"Kate Jones\"\n  email: \"kate.jones@example.com\"\n  image: images/kate.jpg\n```\n. . .\n\nJust like with navbar items, listing items must be properly indented\n\n## Listings from Multiple Sources\n\nWe can created a listing from multiple sources of metadata:\n\n```{.yaml filename=\"writings.qmd\"}\ntitle: \"Writings\"\nlisting:\n  contents:         # e.g.\n    - posts         # .qmd files\n    - articles      # in posts/ and articles/\n    - old-posts.yml # AND items from other websites\n```\n\n## Listing Location\n\nTo specify the position of a listing use the `id` option:\n\n```{.yaml code-line-numbers=\"4,12,13\"}\n---\ntitle: \"Listing Example\"\nlisting:\n  id: sample-listings\n  contents: posts\n  sort: \"date desc\"\n  type: table\n---\n\nYou can review the following documents for additional information:\n\n::: {#sample-listings}\n:::\n\nLearn more about Quarto [here](https://www.quarto.com).\n```\n\n## Your Turn: YAML Listings\n\n::: task\n- Add a yaml file with at least 3 items (e.g. `people.yml` or `definitions.yml`)\n- Include `title`, `description` and one custom field (e.g. `email` or `definition`)\n- Add a listing on the home page of the website `index.qmd` with a suitable type.\n- **Stretch**: Change the location of the listing with the `id` option\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_0aee390a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Listing Tools\n\n## Categories {.medium}\n\nThe categories feature allows website users to filter items.\n\n![](https://quarto.org/docs/websites/images/listing-categories.png)\n\n. . . \n\nWhen a user presses a category on the right, the listing will update to show only items which match that category.\n\n## Categories\n\n1. Turn on categories in your listing:\n```{.yaml code-line-numbers=\"3\"}\nlistings:\n  type: default\n  categories: true\n```\n. . .\n\n2. Adding category values to each item or document listed:\n\n```{.yaml code-line-numbers=\"3,4\"}\n- title: \"Kate Jones\"\n  email: kate.jones@example.com\n  categories: \n    - alumni\n```\n\n## Sorting\n\nBy default, items will be sorted by `title`. To modify this use the `sort` option.\n\n```{.yaml code-line-numbers=\"6-7\"}\nlisting:\n  contents: posts\n  sort:\n    - \"date\"\n    - \"title desc\"\n```\n. . .\n\nThis listing sorts items first by `date` in ascending order then by descending `title`\n\n## Interactive UI\n\nBy default, users can:\n\n- sort by `title`, `date` and `author`\n- filter/search all metadata fields\n\n. . .\n\nWe can disable these features or limit the fields they apply to:\n\n```{.yaml}\nlisting:\n  sort-ui: false     # no sorting\n  filter-ui: [title] # only search the title field\n```\n::: notes\nuseful for defintion glossary\n:::\n\n## Your Turn: Listing Tools\n\n::: task\nContinue with the YAML listing you created before.\n\n- Add `categories` to each item\n- Turn on categories in your listing\n- Modify the `sort-ui` and/or `filter-ui`\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_8952e480\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}